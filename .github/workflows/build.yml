name: Build flutter app

on:
  workflow_call:
    inputs:
      app_version:
        required: true
        type: string
        description: "App version"
        default: "1.0.0"
      build_number:
        required: true
        type: string
        description: "Build number"
        default: "1"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      APP_VERSION: ${{ inputs.app_version }}
      BUILD_NUMBER: ${{ inputs.build_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"
          cache: true

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: torrent/src/go.mod
          cache-dependency-path: torrent/src/go.sum

        # Run flutter doctor to verify dependencies
      - name: Flutter doctor
        run: flutter doctor --verbose
        shell: bash

        ############################
        # Build for each platform
        ############################

      # Build for Linux
      - name: Reinstall some packages
        if: runner.os == 'Linux'
        run: sudo apt-get install -y --reinstall libglu1-mesa clang cmake ninja-build libgtk-3-dev libmpv-dev mpv libfuse2

      # - name: Fix missing libblas.so.3 and liblapack.so.3
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo find /usr/lib -name libblas.so.3
      #     sudo ln -s /usr/lib/x86_64-linux-gnu/blas/libblas.so.3 /usr/lib/x86_64-linux-gnu/
      #     sudo ln -s /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3 /usr/lib/x86_64-linux-gnu/

      - name: Build for Linux
        if: runner.os == 'Linux'
        run: scripts/build-linux.sh ${{ env.APP_VERSION }} ${{ env.BUILD_NUMBER }}
        shell: bash

        # Build for windows
      - name: Install msys2
        id: msys2
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: git mingw-w64-ucrt-x86_64-gcc

      - name: Change path to include ucrt64
        if: runner.os == 'Windows'
        run: |
          echo '${{ steps.msys2.outputs.msys2-location }}\ucrt64\bin' >> $GITHUB_PATH
        shell: bash

      - name: Build Windows
        if: runner.os == 'Windows'
        run: scripts/build-windows.sh ${{ env.APP_VERSION }} ${{ github.run_attempt }}
        shell: bash

      - name: Compile .ISS to .EXE Installer
        if: runner.os == 'Windows'
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: windows/torplayer.iss
          options: /DMyAppVersion=${{ env.APP_VERSION }} /DWorkingDir="${{ github.workspace }}" /DUCRT64Dir="${{ steps.msys2.outputs.msys2-location }}\ucrt64\bin" /F"TorPlayer-${{ env.APP_VERSION }}_Setup"

        # Build for macOS
      - name: Build for macOS
        if: runner.os == 'macOS'
        run: scripts/build-macos.sh ${{ env.APP_VERSION }} ${{ env.BUILD_NUMBER }}
        shell: bash

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tor_player_${{ runner.os }}
          path: |
            build/*.AppImage
            build\*.exe
            build/*.dmg
            build/*.apk
            build/*.pkg
